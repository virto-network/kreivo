name: Benchmarks

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Ubuntu dependencies
        shell: bash
        run: sudo apt update && sudo apt install -y protobuf-compiler

      - name: Use Stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          components: rust-src

      - uses: actions/checkout@v4

      - name: Release build with `runtime-benchmarks`
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --profile production --features ${{ github.ref_name == 'dev' && 'paseo,runtime-benchmarks' || 'runtime-benchmarks' }} --locked -p kreivo-runtime

      - name: Upload runtime to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.run_id }}-runtime
          path: ./target/production/wbuild/kreivo-runtime/${{ env.RUNTIME_NAME }}

  provision:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.set-label.outputs.label }}
      token: ${{ steps.get_token.outputs.token }}
    steps:
      - name: Set dynamic runner label
        id: set-label
        run: echo "label=vm-${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Get GitHub runner token
        id: get_token
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.PAT_VM_RUNNERS }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token \
            > token.json
          cat token.json
          echo "token=$(jq -r .token token.json)" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: '.github/scripts/render-cloud-init.sh'

      - name: Generate cloud-init
        run: |
          ./.github/scripts/render-cloud-init.sh "${{ steps.get_token.outputs.token }}" \
            "https://github.com/${{ github.repository }}" \
            "vm-${{ github.run_id }}" > cloud-init.txt
          cat cloud-init.txt

      - name: Azure Login
        run: |
          az login --service-principal \
            --username "${{ secrets.AZURE_CLIENT_ID }}" \
            --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ secrets.AZURE_TENANT_ID }}"
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Launch Azure VM
        run: |
          az vm create \
            --name gh-vm-${{ github.run_id }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --image Ubuntu2204 \
            --size Standard_D16s_v5 \
            --os-disk-size-gb 32 \
            --admin-username azureuser \
            --generate-ssh-keys \
            --custom-data cloud-init.txt \
            --tags "github_label=vm-${{ github.run_id }}"

      - name: Wait for VM to come online
        run: sleep 60

  benchmark:
    name: Run Benchmarks
    runs-on: [ self-hosted, "${{ needs.provision.outputs.label }}" ]
    needs: provision
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Say hello
        run: |
          echo "Running on Azure VM with label ${{ needs.provision.outputs.label }}"

      - uses: actions/checkout@v4

      - name: Create `target/release` folder
        run: |
          mkdir -p .benchmarking-logs target/release/wbuild/kreivo-runtime

      - name: Get artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.run_id }}-runtime
          path: ./target/release

      - name: Use Stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          components: rust-src

      - name: Install `frame-omni-bencher`
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --git https://github.com/paritytech/polkadot-sdk.git --branch stable2503 frame-omni-bencher

      - run: |
          just benchmarks

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.run_id }}-benchmark_logs
          path: ./.benchmarking-logs

      - uses: peter-evans/create-pull-request@v6
        with:
          add-paths: runtime/kreivo/src/weights
          commit-message: '[ci] calculate weights'
          branch: benchmarks
          branch-suffix: short-commit-hash
          title: "Benchmarking: Calculate weights for ${{ github.sha }}"
          body: |
            This Pull Request is automatically raised when pushing over `master`
            and should be resolved and reviewed manually.
          assignees: ${{ github.actor_id }}

  cleanup:
    name: Destroy VM
    if: always()
    runs-on: ubuntu-latest
    needs: [ provision, benchmark ]
    steps:
      - name: Azure Login
        run: |
          az login --service-principal \
            --username "${{ secrets.AZURE_CLIENT_ID }}" \
            --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ secrets.AZURE_TENANT_ID }}"
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Remove runner from GitHub
        run: |
          curl -O -L https://github.com/actions/runner/releases/download/v2.324.0/actions-runner-linux-x64-2.324.0.tar.gz &&
          tar xzf ./actions-runner-linux-x64-2.324.0.tar.gz &&
          ./config.sh remove --token $TOKEN || echo "‚ö†Ô∏è  Could not remove GitHub Runner"

      - name: Delete VM and associated resources
        run: |
          set -euo pipefail

          RESOURCE_GROUP=${{ secrets.AZURE_RESOURCE_GROUP }}
          VM_NAME=gh-vm-${{ github.run_id }}

          echo "üßπ Deleting VM: $VM_NAME"

          # Get NIC ID
          NIC_ID=$(az vm show --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" --query 'networkProfile.networkInterfaces[0].id' -o tsv || echo "")
          if [ -n "$NIC_ID" ]; then
            NIC_NAME=$(basename "$NIC_ID")
          else
            echo "‚ö†Ô∏è  NIC ID not found"
            NIC_NAME=""
          fi

          # Get public IP ID
          if [ -n "$NIC_NAME" ]; then
            IP_ID=$(az network nic show --resource-group "$RESOURCE_GROUP" --name "$NIC_NAME" --query 'ipConfigurations[0].publicIpAddress.id' -o tsv || echo "")
            echo "IP_ID is \"$IP_ID\""
            if [ -n "$IP_ID" ]; then
              IP_NAME=$(basename "$IP_ID")
            else
              echo "‚ö†Ô∏è  Public IP ID not found"
              IP_NAME=""
            fi
          else
            IP_NAME=""
          fi

          # Get VNet from NIC
          VNET_NAME=""
          if [ -n "$NIC_NAME" ]; then
            SUBNET_ID=$(az network nic show --resource-group "$RESOURCE_GROUP" --name "$NIC_NAME" --query 'ipConfigurations[0].subnet.id' -o tsv || echo "")
            if [ -n "$SUBNET_ID" ]; then
              VNET_NAME=$(echo "$SUBNET_ID" | cut -d'/' -f9)
            fi
          fi

          # Get OS disk name
          DISK_NAME=$(az vm show --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" --query 'storageProfile.osDisk.name' -o tsv || echo "")

          # Delete VM
          echo "üóëÔ∏è  Deleting VM..."
          az vm delete --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" --yes || echo "‚ö†Ô∏è  VM already deleted or not found"

          # Delete NIC
          if [ -n "$NIC_NAME" ]; then
            echo "üóëÔ∏è  Deleting NIC: $NIC_NAME"
            az network nic delete --resource-group "$RESOURCE_GROUP" --name "$NIC_NAME" || echo "‚ö†Ô∏è  NIC not found"
          fi

          # Delete Public IP
          if [ -n "$IP_NAME" ]; then
            echo "üóëÔ∏è  Deleting Public IP: $IP_NAME"
            az network public-ip delete --resource-group "$RESOURCE_GROUP" --name "$IP_NAME" || echo "‚ö†Ô∏è  Public IP not found"
          fi

          # Delete OS disk
          if [ -n "$DISK_NAME" ]; then
            echo "üóëÔ∏è  Deleting OS disk: $DISK_NAME"
            az disk delete --resource-group "$RESOURCE_GROUP" --name "$DISK_NAME" --yes || echo "‚ö†Ô∏è  Disk not found"
          fi

          # Delete VNet
          if [ -n "$VNET_NAME" ]; then
            echo "üóëÔ∏è  Deleting VNet: $VNET_NAME"
            az network vnet delete --resource-group "$RESOURCE_GROUP" --name "$VNET_NAME" || echo "‚ö†Ô∏è  VNet not found or shared"
          fi

          echo "‚úÖ Cleanup complete."
