
//! Autogenerated weights for `pallet_contracts_store`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-05-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gh-vm-15255853159`, CPU: `Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// /home/runner/.cargo/bin/frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/kreivo-runtime/kreivo_runtime.compact.compressed.wasm
// --pallet
// pallet_contracts_store
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/kreivo/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_contracts_store`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_contracts_store::WeightInfo for WeightInfo<T> {
	/// Storage: `ContractsStore::NextAppId` (r:1 w:1)
	/// Proof: `ContractsStore::NextAppId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ContractsStore::Apps` (r:1 w:1)
	/// Proof: `ContractsStore::Apps` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Collection` (r:1 w:1)
	/// Proof: `ListingsCatalog::Collection` (`max_values`: None, `max_size`: Some(86), added: 2561, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::CollectionRoleOf` (r:0 w:1)
	/// Proof: `ListingsCatalog::CollectionRoleOf` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::CollectionConfigOf` (r:0 w:1)
	/// Proof: `ListingsCatalog::CollectionConfigOf` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::CollectionAccount` (r:0 w:1)
	/// Proof: `ListingsCatalog::CollectionAccount` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	fn publish() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `82`
		//  Estimated: `3605`
		// Minimum execution time: 28_020_000 picoseconds.
		Weight::from_parts(29_005_000, 0)
			.saturating_add(Weight::from_parts(0, 3605))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `ContractsStore::Apps` (r:1 w:1)
	/// Proof: `ContractsStore::Apps` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn set_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `225`
		//  Estimated: `3605`
		// Minimum execution time: 17_015_000 picoseconds.
		Weight::from_parts(17_572_000, 0)
			.saturating_add(Weight::from_parts(0, 3605))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ContractsStore::Apps` (r:1 w:1)
	/// Proof: `ContractsStore::Apps` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn publish_upgrade() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `225`
		//  Estimated: `3605`
		// Minimum execution time: 14_232_000 picoseconds.
		Weight::from_parts(14_800_000, 0)
			.saturating_add(Weight::from_parts(0, 3605))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ContractsStore::Apps` (r:1 w:1)
	/// Proof: `ContractsStore::Apps` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `ContractsStore::NextLicenseId` (r:1 w:1)
	/// Proof: `ContractsStore::NextLicenseId` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Collection` (r:1 w:1)
	/// Proof: `ListingsCatalog::Collection` (`max_values`: None, `max_size`: Some(86), added: 2561, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Item` (r:1 w:1)
	/// Proof: `ListingsCatalog::Item` (`max_values`: None, `max_size`: Some(164), added: 2639, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::CollectionConfigOf` (r:1 w:0)
	/// Proof: `ListingsCatalog::CollectionConfigOf` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::ItemConfigOf` (r:1 w:1)
	/// Proof: `ListingsCatalog::ItemConfigOf` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Attribute` (r:3 w:2)
	/// Proof: `ListingsCatalog::Attribute` (`max_values`: None, `max_size`: Some(485), added: 2960, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Account` (r:0 w:2)
	/// Proof: `ListingsCatalog::Account` (`max_values`: None, `max_size`: Some(94), added: 2569, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::ItemPriceOf` (r:0 w:1)
	/// Proof: `ListingsCatalog::ItemPriceOf` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::PendingSwapOf` (r:0 w:1)
	/// Proof: `ListingsCatalog::PendingSwapOf` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	fn request_license() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `674`
		//  Estimated: `9870`
		// Minimum execution time: 163_486_000 picoseconds.
		Weight::from_parts(167_996_000, 0)
			.saturating_add(Weight::from_parts(0, 9870))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(12))
	}
}
