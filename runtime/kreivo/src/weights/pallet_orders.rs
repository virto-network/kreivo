
//! Autogenerated weights for `pallet_orders`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-05-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gh-vm-15255853159`, CPU: `Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// /home/runner/.cargo/bin/frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/kreivo-runtime/kreivo_runtime.compact.compressed.wasm
// --pallet
// pallet_orders
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/kreivo/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_orders`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_orders::WeightInfo for WeightInfo<T> {
	/// Storage: `Orders::Cart` (r:1 w:1)
	/// Proof: `Orders::Cart` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Orders::NextOrderId` (r:1 w:1)
	/// Proof: `Orders::NextOrderId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Item` (r:64 w:0)
	/// Proof: `ListingsCatalog::Item` (`max_values`: None, `max_size`: Some(164), added: 2639, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Attribute` (r:64 w:0)
	/// Proof: `ListingsCatalog::Attribute` (`max_values`: None, `max_size`: Some(485), added: 2960, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Order` (r:0 w:1)
	/// Proof: `Orders::Order` (`max_values`: None, `max_size`: Some(5819), added: 8294, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 5]`.
	/// The range of component `q` is `[1, 64]`.
	fn create_cart(p: u32, q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `479 + q * (260 ±0)`
		//  Estimated: `3554 + q * (2960 ±0)`
		// Minimum execution time: 48_289_000 picoseconds.
		Weight::from_parts(39_755_946, 0)
			.saturating_add(Weight::from_parts(0, 3554))
			// Standard Error: 92_670
			.saturating_add(Weight::from_parts(51_674, 0).saturating_mul(p.into()))
			// Standard Error: 6_687
			.saturating_add(Weight::from_parts(13_691_754, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(q.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 2960).saturating_mul(q.into()))
	}
	/// Storage: `Orders::Order` (r:1 w:1)
	/// Proof: `Orders::Order` (`max_values`: None, `max_size`: Some(5819), added: 8294, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Item` (r:64 w:0)
	/// Proof: `ListingsCatalog::Item` (`max_values`: None, `max_size`: Some(164), added: 2639, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Attribute` (r:64 w:0)
	/// Proof: `ListingsCatalog::Attribute` (`max_values`: None, `max_size`: Some(485), added: 2960, mode: `MaxEncodedLen`)
	/// The range of component `q` is `[1, 64]`.
	fn set_cart_items(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `596 + q * (260 ±0)`
		//  Estimated: `9284 + q * (2960 ±0)`
		// Minimum execution time: 36_150_000 picoseconds.
		Weight::from_parts(27_660_112, 0)
			.saturating_add(Weight::from_parts(0, 9284))
			// Standard Error: 9_456
			.saturating_add(Weight::from_parts(13_602_505, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(q.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2960).saturating_mul(q.into()))
	}
	/// Storage: `Orders::Order` (r:1 w:1)
	/// Proof: `Orders::Order` (`max_values`: None, `max_size`: Some(5819), added: 8294, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Item` (r:64 w:0)
	/// Proof: `ListingsCatalog::Item` (`max_values`: None, `max_size`: Some(164), added: 2639, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Attribute` (r:128 w:64)
	/// Proof: `ListingsCatalog::Attribute` (`max_values`: None, `max_size`: Some(485), added: 2960, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::CollectionConfigOf` (r:1 w:0)
	/// Proof: `ListingsCatalog::CollectionConfigOf` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::ItemConfigOf` (r:64 w:0)
	/// Proof: `ListingsCatalog::ItemConfigOf` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Collection` (r:1 w:1)
	/// Proof: `ListingsCatalog::Collection` (`max_values`: None, `max_size`: Some(86), added: 2561, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Cart` (r:1 w:1)
	/// Proof: `Orders::Cart` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(155814), added: 158289, mode: `MaxEncodedLen`)
	fn checkout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `23076`
		//  Estimated: `379870`
		// Minimum execution time: 3_267_966_000 picoseconds.
		Weight::from_parts(3_280_710_000, 0)
			.saturating_add(Weight::from_parts(0, 379870))
			.saturating_add(T::DbWeight::get().reads(264))
			.saturating_add(T::DbWeight::get().writes(69))
	}
	/// Storage: `Orders::Order` (r:1 w:1)
	/// Proof: `Orders::Order` (`max_values`: None, `max_size`: Some(5819), added: 8294, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Attribute` (r:64 w:64)
	/// Proof: `ListingsCatalog::Attribute` (`max_values`: None, `max_size`: Some(485), added: 2960, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Collection` (r:1 w:1)
	/// Proof: `ListingsCatalog::Collection` (`max_values`: None, `max_size`: Some(86), added: 2561, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(155814), added: 158289, mode: `MaxEncodedLen`)
	fn cancel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13928`
		//  Estimated: `190430`
		// Minimum execution time: 1_392_284_000 picoseconds.
		Weight::from_parts(1_403_799_000, 0)
			.saturating_add(Weight::from_parts(0, 190430))
			.saturating_add(T::DbWeight::get().reads(68))
			.saturating_add(T::DbWeight::get().writes(68))
	}
	/// Storage: `Orders::Order` (r:1 w:1)
	/// Proof: `Orders::Order` (`max_values`: None, `max_size`: Some(5819), added: 8294, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Item` (r:64 w:64)
	/// Proof: `ListingsCatalog::Item` (`max_values`: None, `max_size`: Some(164), added: 2639, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Attribute` (r:128 w:64)
	/// Proof: `ListingsCatalog::Attribute` (`max_values`: None, `max_size`: Some(485), added: 2960, mode: `MaxEncodedLen`)
	/// Storage: `PaymentIndices::Index` (r:1 w:1)
	/// Proof: `PaymentIndices::Index` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Payments::Payment` (r:64 w:64)
	/// Proof: `Payments::Payment` (`max_values`: None, `max_size`: Some(5053), added: 7528, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(224), added: 2699, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::BalancesOnHold` (r:2 w:2)
	/// Proof: `AssetsHolder::BalancesOnHold` (`max_values`: None, `max_size`: Some(98), added: 2573, mode: `MaxEncodedLen`)
	/// Storage: `AssetsFreezer::FrozenBalances` (r:1 w:0)
	/// Proof: `AssetsFreezer::FrozenBalances` (`max_values`: None, `max_size`: Some(98), added: 2573, mode: `MaxEncodedLen`)
	/// Storage: `AssetsHolder::Holds` (r:2 w:2)
	/// Proof: `AssetsHolder::Holds` (`max_values`: None, `max_size`: Some(227), added: 2702, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Collection` (r:1 w:1)
	/// Proof: `ListingsCatalog::Collection` (`max_values`: None, `max_size`: Some(86), added: 2561, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::CollectionConfigOf` (r:1 w:0)
	/// Proof: `ListingsCatalog::CollectionConfigOf` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::ItemConfigOf` (r:64 w:0)
	/// Proof: `ListingsCatalog::ItemConfigOf` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(155814), added: 158289, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Payment` (r:0 w:64)
	/// Proof: `Orders::Payment` (`max_values`: None, `max_size`: Some(46), added: 2521, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::Account` (r:0 w:128)
	/// Proof: `ListingsCatalog::Account` (`max_values`: None, `max_size`: Some(94), added: 2569, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::ItemPriceOf` (r:0 w:64)
	/// Proof: `ListingsCatalog::ItemPriceOf` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `ListingsCatalog::PendingSwapOf` (r:0 w:64)
	/// Proof: `ListingsCatalog::PendingSwapOf` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	/// Storage: `Payments::PaymentParties` (r:0 w:64)
	/// Proof: `Payments::PaymentParties` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn pay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28521`
		//  Estimated: `482782`
		// Minimum execution time: 13_331_609_000 picoseconds.
		Weight::from_parts(13_373_345_000, 0)
			.saturating_add(Weight::from_parts(0, 482782))
			.saturating_add(T::DbWeight::get().reads(335))
			.saturating_add(T::DbWeight::get().writes(587))
	}
}
