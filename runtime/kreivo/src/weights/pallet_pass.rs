
//! Autogenerated weights for `pallet_pass`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-05-26, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gh-vm-15254924189`, CPU: `Intel(R) Xeon(R) Platinum 8473C`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// /home/runner/.cargo/bin/frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/kreivo-runtime/kreivo_runtime.compact.compressed.wasm
// --pallet
// pallet_pass
// --extrinsic
// *
// --steps
// 2
// --repeat
// 1
// --output
// ./runtime/kreivo/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_pass`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_pass::WeightInfo for WeightInfo<T> {
	/// Storage: `Pass::RegistrarConsiderations` (r:1 w:1)
	/// Proof: `Pass::RegistrarConsiderations` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Pass::DeviceConsiderations` (r:1 w:1)
	/// Proof: `Pass::DeviceConsiderations` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Pass::Devices` (r:0 w:1)
	/// Proof: `Pass::Devices` (`max_values`: None, `max_size`: Some(220), added: 2695, mode: `MaxEncodedLen`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3593`
		// Minimum execution time: 38_861_000 picoseconds.
		Weight::from_parts(38_861_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Pass::Devices` (r:2 w:0)
	/// Proof: `Pass::Devices` (`max_values`: None, `max_size`: Some(220), added: 2695, mode: `MaxEncodedLen`)
	fn authenticate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `281`
		//  Estimated: `6380`
		// Minimum execution time: 17_385_000 picoseconds.
		Weight::from_parts(17_385_000, 0)
			.saturating_add(Weight::from_parts(0, 6380))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `Pass::Devices` (r:1 w:1)
	/// Proof: `Pass::Devices` (`max_values`: None, `max_size`: Some(220), added: 2695, mode: `MaxEncodedLen`)
	/// Storage: `Pass::DeviceConsiderations` (r:1 w:1)
	/// Proof: `Pass::DeviceConsiderations` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	fn add_device() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `448`
		//  Estimated: `3685`
		// Minimum execution time: 73_873_000 picoseconds.
		Weight::from_parts(73_873_000, 0)
			.saturating_add(Weight::from_parts(0, 3685))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Pass::Devices` (r:2 w:1)
	/// Proof: `Pass::Devices` (`max_values`: None, `max_size`: Some(220), added: 2695, mode: `MaxEncodedLen`)
	/// Storage: `Pass::DeviceConsiderations` (r:1 w:1)
	/// Proof: `Pass::DeviceConsiderations` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	fn remove_device() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `559`
		//  Estimated: `6380`
		// Minimum execution time: 74_879_000 picoseconds.
		Weight::from_parts(74_879_000, 0)
			.saturating_add(Weight::from_parts(0, 6380))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Pass::Devices` (r:1 w:0)
	/// Proof: `Pass::Devices` (`max_values`: None, `max_size`: Some(220), added: 2695, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Pass::SessionKeyConsiderations` (r:1 w:1)
	/// Proof: `Pass::SessionKeyConsiderations` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Pass::SessionKeys` (r:1 w:1)
	/// Proof: `Pass::SessionKeys` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Pass::CounterForSessionKeys` (r:1 w:1)
	/// Proof: `Pass::CounterForSessionKeys` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(155814), added: 158289, mode: `MaxEncodedLen`)
	fn add_session_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `355`
		//  Estimated: `159279`
		// Minimum execution time: 60_784_000 picoseconds.
		Weight::from_parts(60_784_000, 0)
			.saturating_add(Weight::from_parts(0, 159279))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(155814), added: 158289, mode: `MaxEncodedLen`)
	/// Storage: `Pass::SessionKeys` (r:1 w:1)
	/// Proof: `Pass::SessionKeys` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Pass::SessionKeyConsiderations` (r:1 w:1)
	/// Proof: `Pass::SessionKeyConsiderations` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Pass::CounterForSessionKeys` (r:1 w:1)
	/// Proof: `Pass::CounterForSessionKeys` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_session_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `564`
		//  Estimated: `159279`
		// Minimum execution time: 50_233_000 picoseconds.
		Weight::from_parts(50_233_000, 0)
			.saturating_add(Weight::from_parts(0, 159279))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
}
